#ULTIMATE FRONTSTACK COMPOSE!!!

networks:
  frontstack:
    external: true 
  proxystack:
    internal: true
  authstack:
    internal: true

secrets:
  cf-token:
    file: ./cf-token
    
services:
  traefik:
    image: traefik:v3.5 
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true 
    secrets:
      - cf-token 
    env_file:
      - .env 
    networks:
      - frontstack
      - proxystack
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 10000:10000/tcp 
      - 33073:33073
      - 443:443/udp # https http3 quic
      - 127.0.0.1:8080:8080 # http api dashboard
    expose:
      - 80 # http
      - 443 # https
      - 8080 # http api dashboard
    environment:
      - TRAEFIK_DASHBOARD_CREDENTIALS=${TRAEFIK_DASHBOARD_CREDENTIALS}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf-token # see https://doc.traefik.io/traefik/https/acme/ #providers
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    command:
      - "--providers.docker=true" # enable docker provider
      - "--providers.docker.network=proxy" # define default network to monitor for docker provider
      - "--providers.docker.endpoint=tcp://socket-proxy:2375" # define socket-proxy as docker socket
      - "--providers.docker.exposedbydefault=false" # do not expose docker hosts per default
      - "--providers.file.watch=true" # monitor file provider for changes
      - "--providers.file.filename=/etc/traefik/fileConfig.yml" # location of the dynamic configuration
      - "--entrypoints.http.address=:80" # entrypoint for unencrypted http
      - "--entrypoints.http.forwardedHeaders.trustedIPs=103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32" # define cloudflare ip ranges as trusted
      - "--entrypoints.http.http.redirections.entryPoint.to=https" # automatic redirect from http to https
      - "--entrypoints.http.http.redirections.entryPoint.scheme=https" # automatic redirect from http to https
      - "--entrypoints.https.address=:443" # entrypoint for encrypted https
      - "--entrypoints.https.forwardedHeaders.trustedIPs=103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,104.16.0.0/13,104.24.0.0/14,108.162.192.0/18,131.0.72.0/22,141.101.64.0/18,162.158.0.0/15,172.64.0.0/13,173.245.48.0/20,188.114.96.0/20,190.93.240.0/20,197.234.240.0/22,198.41.128.0/17,2400:cb00::/32,2606:4700::/32,2803:f800::/32,2405:b500::/32,2405:8100::/32,2a06:98c0::/29,2c0f:f248::/32" # define cloudflare ip ranges as trusted
      - "--entrypoints.https.http.middlewares=security-headers@file,rate-limit@file" # define default middlewares for all proxy entries
      - "--api.dashboard=true" # enable traefik api dashboard
      - "--api.insecure=true" # expose traefik api dashboard on TCP/8080 without need for router
      ####################################################
      # !!! ADJUST TO YOUR INFRASTRUCTURE SETUP BELOW !!!!
      - "--entrypoints.https.http.tls.certresolver=myresolver-dns" # define default cert resolver
      - "--entrypoints.https.http.tls.domains[0].main=${SUBDOMAIN_DOMAIN}" # define main domain, change to your domain
      - "--entrypoints.https.http.tls.domains[0].sans=*.${SUBDOMAIN_DOMAIN}" # define sans domain, change to your domain
      - "--certificatesresolvers.myresolver-dns.acme.email=${ACME_EMAIL}" # define your email address
      - "--certificatesresolvers.myresolver-dns.acme.dnschallenge=true" # enable dns challenge to obtain wildcard certificates
      - "--certificatesresolvers.myresolver-dns.acme.dnschallenge.provider=cloudflare" # define provider for certificates
      - "--certificatesresolvers.myresolver-dns.acme.storage=/etc/traefik/acme.json" # define acme path for certificate information
      - "--certificatesresolvers.myresolver-dns.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53" # define dns servers for your resolver, here cloudflare
      - "--certificatesresolvers.myresolver-http.acme.httpchallenge=true" # use http challenge
      - "--certificatesresolvers.myresolver-http.acme.httpchallenge.entrypoint=http" # define entrypoint for http challenge
      ####################################################
      - "--log.level=INFO" # enable log level
      - "--accesslog=true" # enable access logs
      - "--accesslog.filepath=/var/log/traefik.log" # define access log path
      - "--accesslog.format=json" # set access log format to json instead clm
      - "--accesslog.bufferingsize=0" # set access log buffer size to 0
      - "--accesslog.filters.statuscodes=400-599" # only log http errors in logs; alternatively set 200-599 to include successful http requests
      - "--accesslog.fields.headers.defaultmode=drop" # drop all headers
      - "--accesslog.fields.headers.names.user-agent=keep" # keep user-agent header
      - "--serversTransport.insecureSkipVerify=true" # set insecureSkipVerify to true to allow self-signed certificates
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/${USER}/docker/traefik:/etc/traefik/ # bind mount volume for persistent traefik data
      - /home/${USER}/docker/traefik/traefik.yaml:/traefik.yaml:ro
      - /home/${USER}/docker/traefik/acme.json:/acme.json
      - /home/${USER}/docker/traefik/config.yaml:/config.yaml:ro
      - /home/${USER}/docker/traefik/logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=${SUBDOMAIN_DOMAIN}"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.${SUBDOMAIN_DOMAIN}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.api.rule=Host(`traefik.${SUBDOMAIN_DOMAIN}`)" # Define the subdomain for the traefik dashboard.
      - "traefik.http.routers.api.service=api@internal" # Enable Traefik API.
      - "traefik.http.routers.api.middlewares=local-ipwhitelist@file,basic-auth@file" # protect dashboard with basic auth and restrict access to private class subnets only
      #- "traefik.http.middlewares.basic-auth-global.basicauth.users=admin:$$apr1$$epoKf5li$$QfTMJZOCS/halv3CiIUEu0" # protect the traefik dashboard by basic auth (pw=password)
    extra_hosts:
      - host.docker.internal:172.17.0.1

  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:latest
    container_name: socket-proxy
    environment:
      - CONTAINERS=1
      - EVENTS=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxystack
    restart: always
    read_only: true
    tmpfs:
      - /run

  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    env_file:
      - .env
    networks:
      - authstack

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - authstack

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    container_name: authentik_server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - /home/${USER}/docker/authentik/media:/media
      - /home/${USER}/docker/authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    ports:
      - 9000:9000/tcp # http
      - 9443:9443/tcp # https
    expose:
      - 9000
      - 9443  
    networks:
      - authstack
      - frontstack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.entrypoints=http"
      - "traefik.http.routers.authentik.rule=Host(`authentik.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik.middlewares=authentik-https-redirect"
      - "traefik.http.routers.authentik-secure.entrypoints=https"
      - "traefik.http.routers.authentik-secure.rule=Host(`authentik.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.routers.authentik-secure.service=authentik"
      - "traefik.http.services.authentik.loadbalancer.server.scheme=https" 
      - "traefik.http.services.authentik.loadbalancer.server.port=9443"
      - "traefik.docker.network=frontstack"
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik.${SUBDOMAIN_DOMAIN}/outpost.goauthentik.io/auth/traefik" #Port 9000
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: ${USER}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/${USER}/docker/authentik/media:/media
      - /home/${USER}/docker/authentik/certs:/certs
      - /home/${USER}/docker/authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - frontstack
      - proxystack
      
volumes:
  database:
    driver: local
  redis:
    driver: local

  npm:
    image: jc21/nginx-proxy-manager:latest    
    container_name: box-npm
    hostname: box-npm    
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - NGINX_HOST=npm.${SUBDOMAIN_DOMAIN}
      - NGINX_PORT=80
    ports:
      - 81:81/tcp 
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/check-health"]
      interval: 30s
      timeout: 3s
    volumes:
      - /home/${USER}/docker/nginx/data:/data
      - /home/${USER}/docker/nginx/letsencrypt:/etc/letsencrypt
      - /home/${USER}/docker/nginx/templates:/etc/nginx/templates
      - /home/${USER}/docker/nginx/web:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.entrypoints=http"
      - "traefik.http.routers.nginx.rule=Host(`npm.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.middlewares.nginx-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.nginx.middlewares=nginx-https-redirect"
      - "traefik.http.routers.nginx-secure.entrypoints=https"
      - "traefik.http.routers.nginx-secure.rule=Host(`npm.${SUBDOMAIN_DOMAIN}`)"
      - "traefik.http.routers.nginx-secure.tls=true"
      - "traefik.http.routers.nginx-secure.service=nginx"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx-secure.middlewares=middlewares-authentik@file"
      - "traefik.docker.network=frontstack"
    networks:
      - frontstack
    security_opt:
      - no-new-privileges:true
     
  goaccess:
    image: xavierh/goaccess-for-nginxproxymanager:latest
    container_name: goaccess
    restart: always
    ports:
      - '7880:7880'
    expose:
      - 7880
    volumes:
      - /home/${USER}/docker/nginx/data/logs:/opt/log:ro
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SKIP_ARCHIVED_LOGS=False
      - BASIC_AUTH=True
      - BASIC_AUTH_USERNAME=${GO_USER}
      - BASIC_AUTH_PASSWORD=${GO_PASS}
    networks:
      - frontstack
